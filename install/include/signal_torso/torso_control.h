// Generated by gencpp from file signal_torso/torso_control.msg
// DO NOT EDIT!


#ifndef SIGNAL_TORSO_MESSAGE_TORSO_CONTROL_H
#define SIGNAL_TORSO_MESSAGE_TORSO_CONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace signal_torso
{
template <class ContainerAllocator>
struct torso_control_
{
  typedef torso_control_<ContainerAllocator> Type;

  torso_control_()
    : position_des()
    , speed_des()
    , current_kp()
    , current_kd()
    , speed_kp()
    , speed_kd()
    , position_kp()
    , position_kd()  {
    }
  torso_control_(const ContainerAllocator& _alloc)
    : position_des(_alloc)
    , speed_des(_alloc)
    , current_kp(_alloc)
    , current_kd(_alloc)
    , speed_kp(_alloc)
    , speed_kd(_alloc)
    , position_kp(_alloc)
    , position_kd(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _position_des_type;
  _position_des_type position_des;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _speed_des_type;
  _speed_des_type speed_des;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _current_kp_type;
  _current_kp_type current_kp;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _current_kd_type;
  _current_kd_type current_kd;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _speed_kp_type;
  _speed_kp_type speed_kp;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _speed_kd_type;
  _speed_kd_type speed_kd;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _position_kp_type;
  _position_kp_type position_kp;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _position_kd_type;
  _position_kd_type position_kd;





  typedef boost::shared_ptr< ::signal_torso::torso_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::signal_torso::torso_control_<ContainerAllocator> const> ConstPtr;

}; // struct torso_control_

typedef ::signal_torso::torso_control_<std::allocator<void> > torso_control;

typedef boost::shared_ptr< ::signal_torso::torso_control > torso_controlPtr;
typedef boost::shared_ptr< ::signal_torso::torso_control const> torso_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::signal_torso::torso_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::signal_torso::torso_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::signal_torso::torso_control_<ContainerAllocator1> & lhs, const ::signal_torso::torso_control_<ContainerAllocator2> & rhs)
{
  return lhs.position_des == rhs.position_des &&
    lhs.speed_des == rhs.speed_des &&
    lhs.current_kp == rhs.current_kp &&
    lhs.current_kd == rhs.current_kd &&
    lhs.speed_kp == rhs.speed_kp &&
    lhs.speed_kd == rhs.speed_kd &&
    lhs.position_kp == rhs.position_kp &&
    lhs.position_kd == rhs.position_kd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::signal_torso::torso_control_<ContainerAllocator1> & lhs, const ::signal_torso::torso_control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace signal_torso

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::signal_torso::torso_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::signal_torso::torso_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_torso::torso_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_torso::torso_control_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_torso::torso_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_torso::torso_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::signal_torso::torso_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ef265c20ffbd4e92c2ffec96f296f0c";
  }

  static const char* value(const ::signal_torso::torso_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ef265c20ffbd4e9ULL;
  static const uint64_t static_value2 = 0x2c2ffec96f296f0cULL;
};

template<class ContainerAllocator>
struct DataType< ::signal_torso::torso_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "signal_torso/torso_control";
  }

  static const char* value(const ::signal_torso::torso_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::signal_torso::torso_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] position_des\n"
"float32[] speed_des\n"
"uint8[] current_kp\n"
"uint8[] current_kd\n"
"uint8[] speed_kp\n"
"uint8[] speed_kd\n"
"uint8[] position_kp\n"
"uint8[] position_kd\n"
;
  }

  static const char* value(const ::signal_torso::torso_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::signal_torso::torso_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_des);
      stream.next(m.speed_des);
      stream.next(m.current_kp);
      stream.next(m.current_kd);
      stream.next(m.speed_kp);
      stream.next(m.speed_kd);
      stream.next(m.position_kp);
      stream.next(m.position_kd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct torso_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::signal_torso::torso_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::signal_torso::torso_control_<ContainerAllocator>& v)
  {
    s << indent << "position_des[]" << std::endl;
    for (size_t i = 0; i < v.position_des.size(); ++i)
    {
      s << indent << "  position_des[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position_des[i]);
    }
    s << indent << "speed_des[]" << std::endl;
    for (size_t i = 0; i < v.speed_des.size(); ++i)
    {
      s << indent << "  speed_des[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.speed_des[i]);
    }
    s << indent << "current_kp[]" << std::endl;
    for (size_t i = 0; i < v.current_kp.size(); ++i)
    {
      s << indent << "  current_kp[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.current_kp[i]);
    }
    s << indent << "current_kd[]" << std::endl;
    for (size_t i = 0; i < v.current_kd.size(); ++i)
    {
      s << indent << "  current_kd[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.current_kd[i]);
    }
    s << indent << "speed_kp[]" << std::endl;
    for (size_t i = 0; i < v.speed_kp.size(); ++i)
    {
      s << indent << "  speed_kp[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.speed_kp[i]);
    }
    s << indent << "speed_kd[]" << std::endl;
    for (size_t i = 0; i < v.speed_kd.size(); ++i)
    {
      s << indent << "  speed_kd[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.speed_kd[i]);
    }
    s << indent << "position_kp[]" << std::endl;
    for (size_t i = 0; i < v.position_kp.size(); ++i)
    {
      s << indent << "  position_kp[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.position_kp[i]);
    }
    s << indent << "position_kd[]" << std::endl;
    for (size_t i = 0; i < v.position_kd.size(); ++i)
    {
      s << indent << "  position_kd[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.position_kd[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIGNAL_TORSO_MESSAGE_TORSO_CONTROL_H
