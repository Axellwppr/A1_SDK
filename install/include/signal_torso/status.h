// Generated by gencpp from file signal_torso/status.msg
// DO NOT EDIT!


#ifndef SIGNAL_TORSO_MESSAGE_STATUS_H
#define SIGNAL_TORSO_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace signal_torso
{
template <class ContainerAllocator>
struct status_
{
  typedef status_<ContainerAllocator> Type;

  status_()
    : name()
    , error_code()
    , t_mos()
    , t_rotor()  {
    }
  status_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , error_code(_alloc)
    , t_mos(_alloc)
    , t_rotor(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _name_type;
  _name_type name;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _error_code_type;
  _error_code_type error_code;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _t_mos_type;
  _t_mos_type t_mos;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _t_rotor_type;
  _t_rotor_type t_rotor;





  typedef boost::shared_ptr< ::signal_torso::status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::signal_torso::status_<ContainerAllocator> const> ConstPtr;

}; // struct status_

typedef ::signal_torso::status_<std::allocator<void> > status;

typedef boost::shared_ptr< ::signal_torso::status > statusPtr;
typedef boost::shared_ptr< ::signal_torso::status const> statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::signal_torso::status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::signal_torso::status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::signal_torso::status_<ContainerAllocator1> & lhs, const ::signal_torso::status_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.error_code == rhs.error_code &&
    lhs.t_mos == rhs.t_mos &&
    lhs.t_rotor == rhs.t_rotor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::signal_torso::status_<ContainerAllocator1> & lhs, const ::signal_torso::status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace signal_torso

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::signal_torso::status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::signal_torso::status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_torso::status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_torso::status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_torso::status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_torso::status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::signal_torso::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdb5a2cf356c951d5ba2c2340b5e26f1";
  }

  static const char* value(const ::signal_torso::status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdb5a2cf356c951dULL;
  static const uint64_t static_value2 = 0x5ba2c2340b5e26f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::signal_torso::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "signal_torso/status";
  }

  static const char* value(const ::signal_torso::status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::signal_torso::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] name\n"
"float32[] error_code\n"
"float32[] t_mos\n"
"float32[] t_rotor\n"
;
  }

  static const char* value(const ::signal_torso::status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::signal_torso::status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.error_code);
      stream.next(m.t_mos);
      stream.next(m.t_rotor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::signal_torso::status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::signal_torso::status_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "error_code[]" << std::endl;
    for (size_t i = 0; i < v.error_code.size(); ++i)
    {
      s << indent << "  error_code[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.error_code[i]);
    }
    s << indent << "t_mos[]" << std::endl;
    for (size_t i = 0; i < v.t_mos.size(); ++i)
    {
      s << indent << "  t_mos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.t_mos[i]);
    }
    s << indent << "t_rotor[]" << std::endl;
    for (size_t i = 0; i < v.t_rotor.size(); ++i)
    {
      s << indent << "  t_rotor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.t_rotor[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIGNAL_TORSO_MESSAGE_STATUS_H
