// Generated by gencpp from file signal_arm/motor_error.msg
// DO NOT EDIT!


#ifndef SIGNAL_ARM_MESSAGE_MOTOR_ERROR_H
#define SIGNAL_ARM_MESSAGE_MOTOR_ERROR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace signal_arm
{
template <class ContainerAllocator>
struct motor_error_
{
  typedef motor_error_<ContainerAllocator> Type;

  motor_error_()
    : error_code(0)
    , error_description()  {
    }
  motor_error_(const ContainerAllocator& _alloc)
    : error_code(0)
    , error_description(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _error_code_type;
  _error_code_type error_code;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _error_description_type;
  _error_description_type error_description;





  typedef boost::shared_ptr< ::signal_arm::motor_error_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::signal_arm::motor_error_<ContainerAllocator> const> ConstPtr;

}; // struct motor_error_

typedef ::signal_arm::motor_error_<std::allocator<void> > motor_error;

typedef boost::shared_ptr< ::signal_arm::motor_error > motor_errorPtr;
typedef boost::shared_ptr< ::signal_arm::motor_error const> motor_errorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::signal_arm::motor_error_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::signal_arm::motor_error_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::signal_arm::motor_error_<ContainerAllocator1> & lhs, const ::signal_arm::motor_error_<ContainerAllocator2> & rhs)
{
  return lhs.error_code == rhs.error_code &&
    lhs.error_description == rhs.error_description;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::signal_arm::motor_error_<ContainerAllocator1> & lhs, const ::signal_arm::motor_error_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace signal_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::signal_arm::motor_error_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::signal_arm::motor_error_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_arm::motor_error_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::signal_arm::motor_error_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_arm::motor_error_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::signal_arm::motor_error_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::signal_arm::motor_error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a94173f8a054221ce910317553c671d";
  }

  static const char* value(const ::signal_arm::motor_error_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a94173f8a054221ULL;
  static const uint64_t static_value2 = 0xce910317553c671dULL;
};

template<class ContainerAllocator>
struct DataType< ::signal_arm::motor_error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "signal_arm/motor_error";
  }

  static const char* value(const ::signal_arm::motor_error_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::signal_arm::motor_error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 error_code\n"
"string[] error_description\n"
;
  }

  static const char* value(const ::signal_arm::motor_error_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::signal_arm::motor_error_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
      stream.next(m.error_description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_error_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::signal_arm::motor_error_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::signal_arm::motor_error_<ContainerAllocator>& v)
  {
    s << indent << "error_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "error_description[]" << std::endl;
    for (size_t i = 0; i < v.error_description.size(); ++i)
    {
      s << indent << "  error_description[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.error_description[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIGNAL_ARM_MESSAGE_MOTOR_ERROR_H
