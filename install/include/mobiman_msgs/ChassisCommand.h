// Generated by gencpp from file mobiman_msgs/ChassisCommand.msg
// DO NOT EDIT!


#ifndef MOBIMAN_MSGS_MESSAGE_CHASSISCOMMAND_H
#define MOBIMAN_MSGS_MESSAGE_CHASSISCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobiman_msgs
{
template <class ContainerAllocator>
struct ChassisCommand_
{
  typedef ChassisCommand_<ContainerAllocator> Type;

  ChassisCommand_()
    : steer_angles()
    , wheel_speed()  {
    }
  ChassisCommand_(const ContainerAllocator& _alloc)
    : steer_angles(_alloc)
    , wheel_speed(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _steer_angles_type;
  _steer_angles_type steer_angles;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _wheel_speed_type;
  _wheel_speed_type wheel_speed;





  typedef boost::shared_ptr< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisCommand_

typedef ::mobiman_msgs::ChassisCommand_<std::allocator<void> > ChassisCommand;

typedef boost::shared_ptr< ::mobiman_msgs::ChassisCommand > ChassisCommandPtr;
typedef boost::shared_ptr< ::mobiman_msgs::ChassisCommand const> ChassisCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobiman_msgs::ChassisCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobiman_msgs::ChassisCommand_<ContainerAllocator1> & lhs, const ::mobiman_msgs::ChassisCommand_<ContainerAllocator2> & rhs)
{
  return lhs.steer_angles == rhs.steer_angles &&
    lhs.wheel_speed == rhs.wheel_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobiman_msgs::ChassisCommand_<ContainerAllocator1> & lhs, const ::mobiman_msgs::ChassisCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobiman_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "913eccfc8322dbc90f30c89655e26445";
  }

  static const char* value(const ::mobiman_msgs::ChassisCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x913eccfc8322dbc9ULL;
  static const uint64_t static_value2 = 0x0f30c89655e26445ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobiman_msgs/ChassisCommand";
  }

  static const char* value(const ::mobiman_msgs::ChassisCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# for 4w4s vehicles, the order is [fl, fr, rl ,rr]\n"
"float32[] steer_angles\n"
"float32[] wheel_speed\n"
;
  }

  static const char* value(const ::mobiman_msgs::ChassisCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steer_angles);
      stream.next(m.wheel_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobiman_msgs::ChassisCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobiman_msgs::ChassisCommand_<ContainerAllocator>& v)
  {
    s << indent << "steer_angles[]" << std::endl;
    for (size_t i = 0; i < v.steer_angles.size(); ++i)
    {
      s << indent << "  steer_angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.steer_angles[i]);
    }
    s << indent << "wheel_speed[]" << std::endl;
    for (size_t i = 0; i < v.wheel_speed.size(); ++i)
    {
      s << indent << "  wheel_speed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.wheel_speed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBIMAN_MSGS_MESSAGE_CHASSISCOMMAND_H
