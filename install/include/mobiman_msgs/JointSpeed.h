// Generated by gencpp from file mobiman_msgs/JointSpeed.msg
// DO NOT EDIT!


#ifndef MOBIMAN_MSGS_MESSAGE_JOINTSPEED_H
#define MOBIMAN_MSGS_MESSAGE_JOINTSPEED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobiman_msgs
{
template <class ContainerAllocator>
struct JointSpeed_
{
  typedef JointSpeed_<ContainerAllocator> Type;

  JointSpeed_()
    : speed()  {
    }
  JointSpeed_(const ContainerAllocator& _alloc)
    : speed(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::mobiman_msgs::JointSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobiman_msgs::JointSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct JointSpeed_

typedef ::mobiman_msgs::JointSpeed_<std::allocator<void> > JointSpeed;

typedef boost::shared_ptr< ::mobiman_msgs::JointSpeed > JointSpeedPtr;
typedef boost::shared_ptr< ::mobiman_msgs::JointSpeed const> JointSpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobiman_msgs::JointSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobiman_msgs::JointSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobiman_msgs::JointSpeed_<ContainerAllocator1> & lhs, const ::mobiman_msgs::JointSpeed_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobiman_msgs::JointSpeed_<ContainerAllocator1> & lhs, const ::mobiman_msgs::JointSpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobiman_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobiman_msgs::JointSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobiman_msgs::JointSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobiman_msgs::JointSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobiman_msgs::JointSpeed_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobiman_msgs::JointSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobiman_msgs::JointSpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobiman_msgs::JointSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2d600321673904df95b6b086e7cca22";
  }

  static const char* value(const ::mobiman_msgs::JointSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2d600321673904dULL;
  static const uint64_t static_value2 = 0xf95b6b086e7cca22ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobiman_msgs::JointSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobiman_msgs/JointSpeed";
  }

  static const char* value(const ::mobiman_msgs::JointSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobiman_msgs::JointSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] speed\n"
;
  }

  static const char* value(const ::mobiman_msgs::JointSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobiman_msgs::JointSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobiman_msgs::JointSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobiman_msgs::JointSpeed_<ContainerAllocator>& v)
  {
    s << indent << "speed[]" << std::endl;
    for (size_t i = 0; i < v.speed.size(); ++i)
    {
      s << indent << "  speed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.speed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBIMAN_MSGS_MESSAGE_JOINTSPEED_H
