// Generated by gencpp from file mobiman_msgs/ButtonSemantics.msg
// DO NOT EDIT!


#ifndef MOBIMAN_MSGS_MESSAGE_BUTTONSEMANTICS_H
#define MOBIMAN_MSGS_MESSAGE_BUTTONSEMANTICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobiman_msgs
{
template <class ContainerAllocator>
struct ButtonSemantics_
{
  typedef ButtonSemantics_<ContainerAllocator> Type;

  ButtonSemantics_()
    : name()
    , button_status(0)  {
    }
  ButtonSemantics_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , button_status(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _button_status_type;
  _button_status_type button_status;





  typedef boost::shared_ptr< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> const> ConstPtr;

}; // struct ButtonSemantics_

typedef ::mobiman_msgs::ButtonSemantics_<std::allocator<void> > ButtonSemantics;

typedef boost::shared_ptr< ::mobiman_msgs::ButtonSemantics > ButtonSemanticsPtr;
typedef boost::shared_ptr< ::mobiman_msgs::ButtonSemantics const> ButtonSemanticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mobiman_msgs::ButtonSemantics_<ContainerAllocator1> & lhs, const ::mobiman_msgs::ButtonSemantics_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.button_status == rhs.button_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mobiman_msgs::ButtonSemantics_<ContainerAllocator1> & lhs, const ::mobiman_msgs::ButtonSemantics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mobiman_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1a817089c894e9e4413de25d5c745b7";
  }

  static const char* value(const ::mobiman_msgs::ButtonSemantics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1a817089c894e9eULL;
  static const uint64_t static_value2 = 0x4413de25d5c745b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobiman_msgs/ButtonSemantics";
  }

  static const char* value(const ::mobiman_msgs::ButtonSemantics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"uint8 button_status\n"
;
  }

  static const char* value(const ::mobiman_msgs::ButtonSemantics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.button_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ButtonSemantics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobiman_msgs::ButtonSemantics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobiman_msgs::ButtonSemantics_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "button_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBIMAN_MSGS_MESSAGE_BUTTONSEMANTICS_H
